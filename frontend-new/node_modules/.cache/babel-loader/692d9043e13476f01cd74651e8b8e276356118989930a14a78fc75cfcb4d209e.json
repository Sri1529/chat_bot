{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst useChat = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [sessionId, setSessionId] = useState(() => {\n    // Load session ID from localStorage on initialization\n    return localStorage.getItem('chatSessionId') || null;\n  });\n  const [chatHistory, setChatHistory] = useState([]);\n\n  // Save session ID to localStorage whenever it changes\n  useEffect(() => {\n    if (sessionId) {\n      localStorage.setItem('chatSessionId', sessionId);\n    } else {\n      localStorage.removeItem('chatSessionId');\n    }\n  }, [sessionId]);\n\n  // Load chat history when session ID is available\n  useEffect(() => {\n    if (sessionId) {\n      loadChatHistory();\n    }\n  }, [sessionId]);\n  const loadChatHistory = useCallback(async () => {\n    if (!sessionId) return;\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/history/${sessionId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        setChatHistory(data.data.messages || []);\n      }\n    } catch (err) {\n      console.error('Failed to load chat history:', err);\n    }\n  }, [sessionId]);\n  const sendMessage = useCallback(async (message, options = {}) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          sessionId: sessionId || options.sessionId,\n          stream: options.stream || false\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        // Set session ID if not already set\n        if (!sessionId && data.data.sessionId) {\n          setSessionId(data.data.sessionId);\n        }\n        return {\n          response: data.data.response,\n          sessionId: data.data.sessionId,\n          contextFound: data.data.contextFound,\n          contextChunks: data.data.contextChunks,\n          timestamp: data.data.timestamp\n        };\n      } else {\n        throw new Error(data.error || 'Failed to send message');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to send message';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sessionId]);\n  const sendStreamingMessage = useCallback(async (message, onChunk, onComplete, onError) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Use regular chat endpoint instead of streaming\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          sessionId: sessionId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        // Set session ID if not already set\n        if (!sessionId && data.data.sessionId) {\n          setSessionId(data.data.sessionId);\n        }\n\n        // Simulate streaming by breaking the response into chunks\n        const responseText = data.data.message;\n        const words = responseText.split(' ');\n\n        // Send chunks word by word\n        for (let i = 0; i < words.length; i++) {\n          const word = words[i] + (i < words.length - 1 ? ' ' : '');\n          if (onChunk) onChunk(word);\n          // Small delay to simulate streaming\n          await new Promise(resolve => setTimeout(resolve, 50));\n        }\n        if (onComplete) onComplete(data.data.sessionId);\n      } else {\n        throw new Error(data.error || 'Failed to send message');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to send streaming message';\n      setError(errorMessage);\n      if (onError) onError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sessionId]);\n  const getChatHistory = useCallback(async (sessionIdToUse = sessionId) => {\n    if (!sessionIdToUse) {\n      throw new Error('No session ID provided');\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/history/${sessionIdToUse}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        return data.data.messages;\n      } else {\n        throw new Error(data.error || 'Failed to get chat history');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get chat history';\n      setError(errorMessage);\n      throw err;\n    }\n  }, [sessionId]);\n  const clearChatHistory = useCallback(async (sessionIdToUse = sessionId) => {\n    if (!sessionIdToUse) {\n      throw new Error('No session ID provided');\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/reset/${sessionIdToUse}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        // Reset local session ID if clearing current session\n        if (sessionIdToUse === sessionId) {\n          setSessionId(null);\n        }\n        return true;\n      } else {\n        throw new Error(data.error || 'Failed to clear chat history');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to clear chat history';\n      setError(errorMessage);\n      throw err;\n    }\n  }, [sessionId]);\n  const resetSession = useCallback(() => {\n    setSessionId(null);\n    setError(null);\n  }, []);\n  return {\n    sendMessage,\n    sendStreamingMessage,\n    getChatHistory,\n    clearChatHistory,\n    resetSession,\n    sessionId,\n    isLoading,\n    error\n  };\n};\n_s(useChat, \"jeOonaIS0NtawJPHuyj1xIvZaSI=\");\nexport default useChat;","map":{"version":3,"names":["useState","useCallback","useEffect","API_BASE_URL","process","env","REACT_APP_API_URL","useChat","_s","isLoading","setIsLoading","error","setError","sessionId","setSessionId","localStorage","getItem","chatHistory","setChatHistory","setItem","removeItem","loadChatHistory","response","fetch","ok","Error","status","data","json","success","messages","err","console","sendMessage","message","options","method","headers","body","JSON","stringify","stream","contextFound","contextChunks","timestamp","errorMessage","sendStreamingMessage","onChunk","onComplete","onError","responseText","words","split","i","length","word","Promise","resolve","setTimeout","getChatHistory","sessionIdToUse","clearChatHistory","resetSession"],"sources":["/Users/agmac20/Downloads/voicebot-main/frontend-new/src/hooks/useChat.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst useChat = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [sessionId, setSessionId] = useState(() => {\n    // Load session ID from localStorage on initialization\n    return localStorage.getItem('chatSessionId') || null;\n  });\n  const [chatHistory, setChatHistory] = useState([]);\n\n  // Save session ID to localStorage whenever it changes\n  useEffect(() => {\n    if (sessionId) {\n      localStorage.setItem('chatSessionId', sessionId);\n    } else {\n      localStorage.removeItem('chatSessionId');\n    }\n  }, [sessionId]);\n\n  // Load chat history when session ID is available\n  useEffect(() => {\n    if (sessionId) {\n      loadChatHistory();\n    }\n  }, [sessionId]);\n\n  const loadChatHistory = useCallback(async () => {\n    if (!sessionId) return;\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/history/${sessionId}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setChatHistory(data.data.messages || []);\n      }\n    } catch (err) {\n      console.error('Failed to load chat history:', err);\n    }\n  }, [sessionId]);\n\n  const sendMessage = useCallback(async (message, options = {}) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message,\n          sessionId: sessionId || options.sessionId,\n          stream: options.stream || false\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.success) {\n        // Set session ID if not already set\n        if (!sessionId && data.data.sessionId) {\n          setSessionId(data.data.sessionId);\n        }\n        \n        return {\n          response: data.data.response,\n          sessionId: data.data.sessionId,\n          contextFound: data.data.contextFound,\n          contextChunks: data.data.contextChunks,\n          timestamp: data.data.timestamp\n        };\n      } else {\n        throw new Error(data.error || 'Failed to send message');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to send message';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sessionId]);\n\n  const sendStreamingMessage = useCallback(async (message, onChunk, onComplete, onError) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Use regular chat endpoint instead of streaming\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message,\n          sessionId: sessionId\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.success) {\n        // Set session ID if not already set\n        if (!sessionId && data.data.sessionId) {\n          setSessionId(data.data.sessionId);\n        }\n        \n        // Simulate streaming by breaking the response into chunks\n        const responseText = data.data.message;\n        const words = responseText.split(' ');\n        \n        // Send chunks word by word\n        for (let i = 0; i < words.length; i++) {\n          const word = words[i] + (i < words.length - 1 ? ' ' : '');\n          if (onChunk) onChunk(word);\n          // Small delay to simulate streaming\n          await new Promise(resolve => setTimeout(resolve, 50));\n        }\n        \n        if (onComplete) onComplete(data.data.sessionId);\n      } else {\n        throw new Error(data.error || 'Failed to send message');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to send streaming message';\n      setError(errorMessage);\n      if (onError) onError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sessionId]);\n\n  const getChatHistory = useCallback(async (sessionIdToUse = sessionId) => {\n    if (!sessionIdToUse) {\n      throw new Error('No session ID provided');\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/history/${sessionIdToUse}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.success) {\n        return data.data.messages;\n      } else {\n        throw new Error(data.error || 'Failed to get chat history');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get chat history';\n      setError(errorMessage);\n      throw err;\n    }\n  }, [sessionId]);\n\n  const clearChatHistory = useCallback(async (sessionIdToUse = sessionId) => {\n    if (!sessionIdToUse) {\n      throw new Error('No session ID provided');\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/reset/${sessionIdToUse}`, {\n        method: 'DELETE'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.success) {\n        // Reset local session ID if clearing current session\n        if (sessionIdToUse === sessionId) {\n          setSessionId(null);\n        }\n        return true;\n      } else {\n        throw new Error(data.error || 'Failed to clear chat history');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to clear chat history';\n      setError(errorMessage);\n      throw err;\n    }\n  }, [sessionId]);\n\n  const resetSession = useCallback(() => {\n    setSessionId(null);\n    setError(null);\n  }, []);\n\n  return {\n    sendMessage,\n    sendStreamingMessage,\n    getChatHistory,\n    clearChatHistory,\n    resetSession,\n    sessionId,\n    isLoading,\n    error\n  };\n};\n\nexport default useChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}