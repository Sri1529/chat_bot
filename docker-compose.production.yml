services:
  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: voicebot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: ./backend-new
      dockerfile: Dockerfile
    container_name: voicebot-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=us-east-1-aws
      - PINECONE_INDEX_NAME=voicebot-index
      - PINECONE_DIMENSION=1024
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=gemini-1.5-flash
      - GEMINI_MAX_TOKENS=1000
      - GEMINI_TEMPERATURE=0.7
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RAG_TOP_K=5
      - RAG_CHUNK_SIZE=1000
      - RAG_CHUNK_OVERLAP=200
      - SESSION_TTL=3600
      - SESSION_MAX_MESSAGES=100
      - NEWS_MAX_ARTICLES=50
      - NEWS_UPDATE_INTERVAL=3600000
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
