{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nconst useTextToSpeech = () => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const speak = useCallback(text => {\n    if ('speechSynthesis' in window) {\n      // Stop any current speech\n      window.speechSynthesis.cancel();\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = 0.9;\n      utterance.pitch = 1;\n      utterance.volume = 1;\n      utterance.onstart = () => setIsSpeaking(true);\n      utterance.onend = () => setIsSpeaking(false);\n      utterance.onerror = () => setIsSpeaking(false);\n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.warn('Speech synthesis not supported');\n    }\n  }, []);\n  const stopSpeaking = useCallback(() => {\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  }, []);\n  return {\n    speak,\n    stopSpeaking,\n    isSpeaking\n  };\n};\n_s(useTextToSpeech, \"2cVKEoGMQRpKk51L8D6ZdK+Tq+A=\");\nexport default useTextToSpeech;","map":{"version":3,"names":["useState","useCallback","useTextToSpeech","_s","isSpeaking","setIsSpeaking","speak","text","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","onstart","onend","onerror","console","warn","stopSpeaking"],"sources":["/Users/agmac20/Downloads/voicebot-main/frontend-new/src/hooks/useTextToSpeech.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useTextToSpeech = () => {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  const speak = useCallback((text) => {\n    if ('speechSynthesis' in window) {\n      // Stop any current speech\n      window.speechSynthesis.cancel();\n      \n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = 0.9;\n      utterance.pitch = 1;\n      utterance.volume = 1;\n      \n      utterance.onstart = () => setIsSpeaking(true);\n      utterance.onend = () => setIsSpeaking(false);\n      utterance.onerror = () => setIsSpeaking(false);\n      \n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.warn('Speech synthesis not supported');\n    }\n  }, []);\n\n  const stopSpeaking = useCallback(() => {\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  }, []);\n\n  return {\n    speak,\n    stopSpeaking,\n    isSpeaking\n  };\n};\n\nexport default useTextToSpeech;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMM,KAAK,GAAGL,WAAW,CAAEM,IAAI,IAAK;IAClC,IAAI,iBAAiB,IAAIC,MAAM,EAAE;MAC/B;MACAA,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MAE/B,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACL,IAAI,CAAC;MACpDI,SAAS,CAACE,IAAI,GAAG,GAAG;MACpBF,SAAS,CAACG,KAAK,GAAG,CAAC;MACnBH,SAAS,CAACI,MAAM,GAAG,CAAC;MAEpBJ,SAAS,CAACK,OAAO,GAAG,MAAMX,aAAa,CAAC,IAAI,CAAC;MAC7CM,SAAS,CAACM,KAAK,GAAG,MAAMZ,aAAa,CAAC,KAAK,CAAC;MAC5CM,SAAS,CAACO,OAAO,GAAG,MAAMb,aAAa,CAAC,KAAK,CAAC;MAE9CG,MAAM,CAACC,eAAe,CAACH,KAAK,CAACK,SAAS,CAAC;IACzC,CAAC,MAAM;MACLQ,OAAO,CAACC,IAAI,CAAC,gCAAgC,CAAC;IAChD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAGpB,WAAW,CAAC,MAAM;IACrC,IAAI,iBAAiB,IAAIO,MAAM,EAAE;MAC/BA,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MAC/BL,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLC,KAAK;IACLe,YAAY;IACZjB;EACF,CAAC;AACH,CAAC;AAACD,EAAA,CAnCID,eAAe;AAqCrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}