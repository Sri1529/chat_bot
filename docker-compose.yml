version: '3.8'

services:
  # Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: voicebot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - voicebot-network

  # Backend API
  backend:
    build:
      context: ./backend-new
      dockerfile: Dockerfile
    container_name: voicebot-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://localhost:3001
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health/live', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voicebot-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend-new
      dockerfile: Dockerfile
    container_name: voicebot-frontend
    ports:
      - "3001:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - voicebot-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  voicebot-network:
    driver: bridge